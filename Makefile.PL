#
# $Header: /cvsroot/gtk2-perl/gtk2-perl-xs/Gtk2/Makefile.PL,v 1.14 2003/06/27 21:18:08 muppetman Exp $
#

use 5.008;
use strict;
use ExtUtils::MakeMaker;
use Cwd;

# minimum required version of Glib with which we can work.
my $req_glib_ver = 0.25;

# Writing a fake Makefile ensures that CPAN will pick up the correct
# dependencies and install them.
unless (eval "use ExtUtils::Depends;"
           . "use Glib::PkgConfig;"
           # just seeing if Glib is available isn't enough, make sure
           # it's recent enough, too 
           . "use Glib $req_glib_ver;"
           . "1") {
   warn "$@\n";
   WriteMakefile(
         PREREQ_FATAL => 1,
         PREREQ_PM    => {
            Glib::              => $req_glib_ver, # keep this in sync
            ExtUtils::Depends:: => 0.1,
         },
   );
   exit 1; # not reached
}

require 'CodeGen.pm'; # other modules can just 'use Gtk2::CodeGen;' -- we
                      # can't because it's not installed yet.

my %pkgcfg = Glib::PkgConfig->find ('gtk+-2.0');

mkdir 'build', 0777;

#
# autogeneration
#
# we have a whole lot of types which need cast macros, typemap entries,
# and package mapping registration; instead of writing this by hand, we
# use a map file which defines how things are laid out, and then use
# some boilerplate code to convert that map into a header, typemap, and
# xsh file.  see the docs for Gtk2::CodeGen for more info.
#
# we'll use all the default filenames.
#
Gtk2::CodeGen->parse_maps ('gtk2perl');

# one more command generates code to boot all the various extra XS modules.
# we need this because we have lots of XS files without corresponding PMs to
# bootstrap them.
Gtk2::CodeGen->write_boot;

# this one turns the long list of #defines in gdkkeysyms.h into a large
# hash of key names and values, %Gtk2::Gdk::Keysyms.
system 'perl genkeysyms.pl > build/Keysyms.pm';

my %pm_files = (
	'Gtk2.pm'          => '$(INST_LIBDIR)/Gtk2.pm',
	'build/Keysyms.pm' => '$(INST_LIBDIR)/Gtk2/Gdk/Keysyms.pm',
	'CodeGen.pm'       => '$(INST_LIBDIR)/Gtk2/CodeGen.pm',
	'pm/Helper.pm'     => '$(INST_LIBDIR)/Gtk2/Helper.pm',
	'pm/Pango.pm'      => '$(INST_LIBDIR)/Gtk2/Pango.pm',
);
my %pod_files = (
	'Gtk2.pm'          => '$(INST_MAN3DIR)/Gtk2.3pm',
	'build/Keysyms.pm' => '$(INST_MAN3DIR)/Gtk2::Gdk::Keysyms.3pm',
	'CodeGen.pm'       => '$(INST_MAN3DIR)/Gtk2::CodeGen.3pm',
	'pm/Helper.pm'     => '$(INST_MAN3DIR)/Gtk2::Helper.3pm',
	'pm/Pango.pm'      => '$(INST_MAN3DIR)/Gtk2::Pango.3pm',
	'api.pod'          => '$(INST_MAN3DIR)/Gtk2::api.3pm',
);

# now we're ready to start creating the makefile.
# we need to use ExtUtils::Depends to get relevant information out of
# the Glib extension, and to save config information for other modules which
# will chain from this one.

my $gtk2 = ExtUtils::Depends->new ('Gtk2', 'Glib');
# Glib added -I. for us, but we'll need to add -I./build so we can get to
# the autogenerated files.  we do this kindof as a public service to client
# modules, as these will carry through via the depends mechanism.
$gtk2->set_inc ($pkgcfg{cflags} . ' -I./build ');
$gtk2->set_libs ($pkgcfg{libs});
$gtk2->add_pm (%pm_files);
$gtk2->add_xs (<xs/*.xs>);
$gtk2->add_typemaps (map {cwd().'/'.$_} 'gdk.typemap', 'build/gtk2perl.typemap');
$gtk2->add_headers ('gtk2perl.h');

$gtk2->install (qw(gtk2perl.h build/gtk2perl-autogen.h));
$gtk2->save_config ('build/IFiles.pm');

WriteMakefile(
    NAME          => 'Gtk2',
    VERSION_FROM  => 'Gtk2.pm', # finds $VERSION
    ABSTRACT_FROM => 'Gtk2.pm', # retrieve abstract from module
    XSPROTOARG    => '-noprototypes',
    MAN3PODS      => \%pod_files,
    # PREREQ see beginning of file
    $gtk2->get_makefile_vars,
);

#
# there's a bug in the MakeMaker output which results in .xs files in a
# subdirectory being turned into .o files in this dir.  the bug is a missing
# -o on the compiler command line.  this is a hackish fix for it.
#
package MY;
sub const_cccmd {
	my $inherited = shift->SUPER::const_cccmd (@_);
	$inherited .= ' -o $@';
	$inherited;
}
package MAIN;
